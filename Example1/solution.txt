1. Use Parallel Stacks window to determine what code threads are executing.




















1.1. Most threads are inside DoCalculationAndUpdateResultsInterlocked() and only a single thread is "doing the real work" inside GetCompulationallyExpensiveCalculationResult().




















2. Examine the methods DoCalculationAndUpdateResultsInterlocked() and GetCompulationallyExpensiveCalculationResult() to determine whether GetCompulationallyExpensiveCalculationResult() can be run in parallel.




















2.1. GetCompulationallyExpensiveCalculationResult() reads only the input parameter and can be safely run in parallel.




















3. A simple fix is to use a local variable inside DoCalculationAndUpdateResultsInterlocked() and lock only while updating sum and count: 
        private void DoCalculationAndUpdateResultsInterlocked(int p) {
            var simpleFix = GetCompulationallyExpensiveCalculationResult(p);
            lock (lockobject)
            {
                sum += simpleFix;
                count++;
            }
        }
