1. Allow leaked memory to grow till at least 90% of the process memory (wait until "Commit size" of Example5.exe is around 200-300 MB) before taking the memory dump.




















2. Open the memory dump in PerfView and click Dump GC Heap.




















3. Open RefTree tab and ensure checkboxes in all lines with highest values in "Inc %" field are ticked.




















3.1. The following reference chain constituting the memory leak can be seen (the "A -> B" means A holds a reference to B):
static var Example5.DataProcessor.globalCache -> List<ConcurrentDictionary<int, DataClass>> -> DataClass -> List<String>
Examine the code of DataProcessor.




















3.2. DataProcessor class code shows a very similar reference chain:
globalCache -> List<ConcurrentDictionary<int, DataClass>> -> ConcurrentDictionary<int, DataClass> -> DataClass -> List<String>




















4. Examine how globalCache is used and how caching is implemented in DataProcessor.




















4.1. globalCache is never read. Also objects added to it are not related to any unmanaged (native) code and don't reference any IDisposable objects.




















5. A simple fix is to remove globalCache (together with DataProcessor constructor).
